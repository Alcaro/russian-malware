#pragma once
#include "russian.h"

struct sqlite3;

namespace russian {

class firefox_profile {
	string dirname;
	sqlite3* open_db(cstring name); // name is, for example, cookies.sqlite
	
	firefox_profile(string dirname) : dirname(dirname) {}
public:
	firefox_profile(const firefox_profile&) = default;
	firefox_profile(firefox_profile&&) = default;
	
	static firefox_profile get_default();
	static array<firefox_profile> get_all();
	
	// It's the caller's job to check whether the domain should start with a dot.
	string get_cookie(cstring domain, cstring name);
	
	string get_localstorage(cstring domain, cstring key)
	{
		string ret;
		get_localstorage_inner(domain, arrayview<cstring>(&key, 1), arrayvieww<string>(&ret, 1));
		return ret;
	}
	
	template<typename... Ts>
	sarray<string, sizeof...(Ts)> get_localstorage(cstring domain, Ts... args) requires (sizeof...(Ts) > 1)
	{
		cstring args_list[sizeof...(Ts)] = { (cstring)args... };
		sarray<string, sizeof...(Ts)> ret;
		get_localstorage_inner(domain, args_list, ret);
		return ret;
	}
	
private:
	void get_localstorage_inner(cstring domain, arrayview<cstring> keys, arrayvieww<string> values);
};

}
