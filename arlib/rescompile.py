#!/usr/bin/env python3
#(works in python 2 too)

import os

#TODO: use global variables instead, so resources can be added and deleted without rebuilding

use_incbin = True  # Massively speeds up build times if resources are big, but may reduce portability.
# use_incbin = False  # TODO: autodetect target output format, disable if not ELF or not GCC

header = '// Autogenerated, do not edit. All changes will be undone.\n'
body = header

header += '#include <stdint.h>\n#include "../arlib/image.h"\nstruct resources {\nresources();\n'
body += '#include "resources.h"\n'
constructor = "resources::resources()\n{\n"
asm = ""

for fn in sorted(os.listdir("resources/")):
	if fn.startswith("x-"): continue
	with open("resources/"+fn, "rb") as f:
		# split on first period, not last, so 'monospace.font.png' becomes item 'monospace' of extension 'font.png'
		sfn,ext = fn.split(".",1)
		sfn = sfn
		
		b = bytearray(f.read())  # pointless bytearray conversion because in python2, bytes is str and indexing that is str, not int
		
		varname = sfn.replace("-","_")
		varname_raw = varname+"_raw"
		
		if ext == "png":
			header += "image "+varname+";\n"
			constructor += varname+".init_decode_png("+varname_raw+");\n"
		elif ext == "jpg":
			header += "image "+varname+";\n"
			constructor += varname+".init_decode_jpg("+varname_raw+");\n"
		elif ext == "font.png":
			header += "font "+varname+";\n"
			constructor += "{ image font_tmp; font_tmp.init_decode_png("+varname_raw+"); "+varname+".init_from_image(font_tmp); }\n"
		elif ext == "bin":
			varname_raw = varname
		else:
			print("Unknown file type "+ext)
			1/0
		
		if use_incbin:
			asmname = "_ZN9resources"+str(len(varname_raw))+varname_raw+"E"
			asm += ".section .rodata."+asmname+',"a",@progbits\n'
			asm += ".globl "+asmname+"\n"
			asm += ".size "+asmname+", "+str(len(b))+"\n"
			asm += ".type "+asmname+", @object\n"
			asm += asmname+":\n"
			asm += ".incbin \"resources/"+fn+"\"\n"
			asm += "\n"
		else:
			body += "const uint8_t resources::"+varname_raw+"["+str(len(b))+"] = { "
			body += ",".join(str(n) for n in b)
			body += " };\n"
		
		header += "static const uint8_t "+varname_raw+"["+str(len(b))+"];\n"

asm += ".text\n"
header += "};\n"
body += constructor + "}\n"

if use_incbin:
	body += '__asm__(R"(\n'+asm+')");'

with open("obj/resources.h", "wt") as f: f.write(header)
with open("obj/resources.cpp", "wt") as f: f.write(body)
