#!make (not a usable shebang, it's just to help filetype detectors)
# This file sets some variables that are the same in every Arlib project, for example $(OS).
# It can be included ahead of the main Arlib makefile, if some things need to be different between OSes.

ifneq (,)
  $(error conditionals are required; only GNU Make is supported)
panic:
	echo "conditionals are required; only GNU Make is supported"
	false
endif

ifeq (,$(wildcard arlib/string.cpp))
  $(error wrong build directory, go up one level)
endif

all: arlib-default

ARMAKEHEAD := 1

MAKEFLAGS := Rr
.SUFFIXES:
.SECONDEXPANSION:
.DELETE_ON_ERROR:

SPACE := $(NULL) $(NULL)

define LF


endef

CC = gcc
CFLAGS =
CXX = g++
CXXFLAGS = $(CFLAGS)
LD = g++
LFLAGS =
AS = as
ASFLAGS =
AR = ar

CC_FAMILY := gcc
ifneq ($(findstring clang,$(CC) $(CXX) $(LD)),)
  CC_FAMILY := clang
  CC = clang
  CXX = clang++
  LD = clang++
endif

ifeq ($(OS),Windows_NT)
  OS = windows
endif
ifeq ($(OS),)
  dumpmachine := $(shell $(CXX) -dumpmachine)
  ifneq ($(findstring mingw,$(dumpmachine)),)
    OS := windows
  else ifneq ($(findstring linux,$(dumpmachine)),)
    OS := linux
  else
    $(error unrecognized OS $(dumpmachine))
  endif
endif

#ifeq ($(OS),Windows_NT)
#  OS = windows
#else
#  UNAME_S := $(shell uname -s)
#  ifeq ($(UNAME_S),Linux)
#    OS = linux
#  else ifeq ($(UNAME_S),Darwin)
#    OS = osx
#  else ifeq ($(UNAME_S),)
#    $(error couldn't execute uname -s)
#  else
#    $(error unrecognized OS $(UNAME_S))
#  endif
#endif

ifeq ($(OS),windows)
  DUMPMACHINE := $(shell $(CC) -dumpmachine)
  ifeq ($(DUMPMACHINE),i686-w64-mingw32)
    WINBITS = 32
  else ifeq ($(DUMPMACHINE),x86_64-w64-mingw32)
    WINBITS = 64
  else
    $(error can't determine machine bitness)
  endif
endif

ifneq ($(filter $(MAKECMDGOALS),test test-all test-all-twice test-cg check),)
  SELFTEST = 1
  EXCEPTIONS = 1
endif

OPT ?= 0
ifeq ($(OPT),0)
  DEBUG ?= 1
else
  DEBUG ?= 0
endif

HOST_SHELL := sh
ifeq ($(OS),windows)
  ifeq ($(shell echo ^^),^)
    HOST_SHELL := cmd
  else
    # building non-windows binaries on a windows host is not supported (Cygwin or WSL compiling for themselves will probably work)
    # why would you do such a thing, anyways?
    $(warning non-cmd windows detected; if SHELL $(SHELL) is something other than sh.exe, makefile should check for that instead)
    $(warning alternatively, if MSYSTEM $(MSYSTEM) is nonempty, use that)
  endif
endif

ifeq ($(V),)
  Q = @
  ECHOQ = @echo
else
  Q =
  ifeq ($(HOST_SHELL),cmd)
    ECHOQ = @ver>nul
  else
    ECHOQ = @true
  endif
endif

ifeq ($(OS),linux)
  OBJNAME := linux
endif
ifeq ($(OS),windows)
  OBJNAME := windows$(WINBITS)
endif

ifneq ($(OPT),0)
  OBJNAME := $(OBJNAME)-opt
endif
ifneq ($(ASAN),)
  OBJNAME := $(OBJNAME)-asan
endif
ifneq ($(SELFTEST),)
  OBJNAME := $(OBJNAME)-test
endif

OPTFLAGS += -Os -fomit-frame-pointer -fmerge-all-constants -fno-math-errno -fvisibility=hidden -fno-semantic-interposition
OPTFLAGS += -ffunction-sections
# -fdata-sections inhibits some optimizations, and more importantly, turns .bss into .data on Windows
# better split it to more .cpp files
#OPTFLAGS += -fdata-sections
OPTFLAGS += -fno-ident
# pseudo relocations are some kind of linker magic, documented at https://sourceware.org/binutils/docs/ld/Options.html
# they show up only if a global variable or constant is imported from a DLL (rare and possibly bad idea) using
#  PE-level linking rather than LoadLibrary (common but not guaranteed) without declspec(dllimport) (rare and definitely bad idea)
# rare and bad idea means I want to know about it, so let's disable it
# I can create them using (for example) __argc or _timezone, but only by not including its header, or by breaking it with a #define
# (buggy third party libraries would also be an option)
# additionally, without pseudo relocs, it's safe to set -mcmodel=small, making things a bit faster and smaller
# (source: https://gcc.gnu.org/legacy-ml/gcc-patches/2013-03/msg00858.html)
# --disable-auto-import seems to be synonymous to --disable-runtime-pseudo-reloc these days
ifeq ($(OS),windows)
  CONF_LFLAGS += -Wl,--disable-auto-import,--disable-runtime-pseudo-reloc
  ifeq ($(WINBITS),64)
    # this one errors out on 32bit
    OPTFLAGS += -mcmodel=small
  else
    # for the 64bit div/mod functions
    # do this for 32bit only, so I notice if something else sneaks in
    CONF_LFLAGS += -static-libgcc
  endif
endif
OPTFLAGS += -DNDEBUG -DARLIB_OPT

CONF_CXXFLAGS += -fno-threadsafe-statics
OPTLFLAGS += -Wl,--gc-sections,--build-id=none,--relax,--sort-common
ifneq ($(OS),windows)
  OPTLFLAGS += -Wl,--hash-style=gnu
endif
#OPTLFLAGS += -Wl,--print-map
ifneq ($(DEBUG),1)
  #DEBUG means still working on it, so -Werror isn't appropriate yet
  #unused variables, bad indent, etc is super common in WIP code
  #it'd be better if I could disable Werror for anyone who has a newer gcc than me and just wants to get it working,
  # but I can't think of a good way to detect who's me and who's not
  OPTFLAGS += -Werror
  ifneq ($(STRIP),0)
    ifeq ($(SELFTEST),)
      OPTLFLAGS += -s
    endif
  endif
endif
ifeq ($(STRIP),1)
  CONF_LFLAGS += -s
endif

#OBJMANGLE(rule,sources) - takes C/C++ source files and returns the mangled name under the specified rule
OBJMANGLE = $(patsubst %,obj/$1___$(OBJNAME)___%.o,$(subst /,__,$2))
#SOURCENAME(obj) - takes a .o file, returned from OBJMANGLE, and returns the corresponding source file
#does not handle multi-file inputs, use $(foreach)
SOURCENAME = $(strip $(subst __,/,$(lastword $(subst ___,$(SPACE),$(patsubst obj/%.o,%,$1)))))
#DOMAINNAME(obj) - takes a .o file, returned from OBJMANGLE, and returns the corresponding domain
DOMAINNAME = $(firstword $(subst ___,$(SPACE),$(patsubst obj/%.o,%,$1)))
