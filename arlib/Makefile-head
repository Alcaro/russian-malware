#!make (not a usable shebang, it's just to help filetype detectors)
# This file sets some variables that are the same in every Arlib project, for example $(OS).
# It can be included ahead of the main Arlib makefile, if some things need to be different between OSes.

ifneq (,)
  $(error conditionals are required; only GNU Make is supported)
panic:
	echo "conditionals are required; only GNU Make is supported"
	false
endif

ifeq (,$(wildcard arlib/string.cpp))
  $(error wrong build directory, go up one level)
endif

all: arlib-default

ARMAKEHEAD := 1

MAKEFLAGS := Rr
.SUFFIXES:
.SECONDEXPANSION:
.DELETE_ON_ERROR:

SPACE := $(NULL) $(NULL)

define LF


endef

CC = gcc
CFLAGS =
CXX = g++
CXXFLAGS = $(CFLAGS)
LD = g++
LFLAGS =
AS = as
ASFLAGS =
AR = ar

CC_FAMILY := gcc
ifneq ($(findstring clang,$(CC) $(CXX) $(LD)),)
  CC_FAMILY := clang
  CC = clang
  CXX = clang++
  LD = clang++
endif

ifeq ($(OS),Windows_NT)
  OS = windows
endif
ifeq ($(OS),)
  dumpmachine := $(shell $(CXX) -dumpmachine)
  ifneq ($(findstring mingw,$(dumpmachine)),)
    OS := windows
  else ifneq ($(findstring linux,$(dumpmachine)),)
    OS := linux
  else
    $(error unrecognized OS $(dumpmachine))
  endif
endif

#ifeq ($(OS),Windows_NT)
#  OS = windows
#else
#  UNAME_S := $(shell uname -s)
#  ifeq ($(UNAME_S),Linux)
#    OS = linux
#  else ifeq ($(UNAME_S),Darwin)
#    OS = osx
#  else ifeq ($(UNAME_S),)
#    $(error couldn't execute uname -s)
#  else
#    $(error unrecognized OS $(UNAME_S))
#  endif
#endif

ifeq ($(OS),windows)
  DUMPMACHINE := $(shell $(CC) -dumpmachine)
  ifeq ($(DUMPMACHINE),i686-w64-mingw32)
    WINBITS = 32
  else ifeq ($(DUMPMACHINE),x86_64-w64-mingw32)
    WINBITS = 64
  else
    $(error can't determine machine bitness)
  endif
endif

ifneq ($(filter $(MAKECMDGOALS),test test-all test-all-twice test-cg check),)
  SELFTEST = 1
  EXCEPTIONS = 1
endif

OPT ?= 0
ifeq ($(OPT),0)
  DEBUG ?= 1
else
  DEBUG ?= 0
endif

HOST_SHELL := sh
ifeq ($(OS),windows)
  ifeq ($(shell echo ^^),^)
    HOST_SHELL := cmd
  else
    # building non-windows binaries on a windows host is not supported (Cygwin or WSL compiling for themselves will probably work)
    # why would you do such a thing, anyways?
    $(warning non-cmd windows detected; if SHELL $(SHELL) is something other than sh.exe, makefile should check for that instead)
    $(warning alternatively, if MSYSTEM $(MSYSTEM) is nonempty, use that)
  endif
endif
