#!/usr/bin/env python3
import os, sys

if len(sys.argv) != 4 or sys.argv[1] not in ['all','std','core','used']:
	print(
"""usage:
generate.py [all|std|core|used] aropengl arlib/opengl/glsym-all.h
all - emit all functions in gl.h and glext.h
        this is roughly 2600 functions
std - emit only portable (unsuffixed, EXT, ARB or OES) functions
        this is roughly 1900, though many are duplicate
core - emit only core (unsuffixed) functions
        this is roughly 1000
used - emit only actually used functions
        analyzes all .c and .cpp files in the current directory and children,
          except arlib/, obj/, and .git/
        only works if your aropengl object is named 'gl'
""")
	exit()


filter_std = (sys.argv[1] == 'std')
filter_core = (sys.argv[1] == 'core')
filter_used = (sys.argv[1] == 'used')

def readfile(name):
	return open(name, 'rt').read()

def writefile(name, data):
	open(name, 'wt').write(data)

def collapse(str):
	return ' '.join(str.split())

def compile(header):
	lines = header.split("\n")
	typedefs = {}
	funcs = []
	for i,line in enumerate(lines):
		if line.startswith("GLAPI") or line.startswith("WINGDIAPI"):
			func = line
			while ")" not in func:
				i += 1
				func += lines[i]
			funcs.append(func)
		if line.startswith("typedef") and "(" in line:
			name = line.split(")")[0]
			name = name.split("(")[1]
			name = name.split(" ")[1]
			typedefs[name] = True
	out = []
	for func in funcs:
		func = func.replace("GLAPIENTRY","APIENTRY").replace("WINGDIAPI","GLAPI")
		ret = collapse(func.split("APIENTRY")[0].split("GLAPI")[1])
		name = collapse(func.split("APIENTRY")[1].split("(")[0])[2:]
		args = collapse(func.split("(")[1].split(")")[0])
		out.append({ "name": name, "ret": ret, "args": args })
	out.sort(key = lambda func: func["name"])
	return out

def extract_gl(code):
	import re
	code = re.sub("//.*", "", code)
	return list(re.findall(r"gl\.([A-Za-z0-9]+)", code))

def filter(functions, used):
	return [f for f in functions if f["name"] in used]

header = readfile(os.path.join(os.path.dirname(sys.argv[0]), '../deps/gl.h'))
header += readfile(os.path.join(os.path.dirname(sys.argv[0]), '../deps/glext.h'))

functions = compile(header)


def isupperonly(str):
	return str.isalpha() and str.isupper()

if filter_core:
	functions = [f for f in functions if not isupperonly(f["name"][-2:])]

if filter_std:
	functions = [f for f in functions if not isupperonly(f["name"][-2:]) or
		f["name"].endswith("EXT") or f["name"].endswith("ARB") or f["name"].endswith("OES")]

if filter_used:
	import fnmatch
	import os
	
	used = []
	for root, dirs, files in os.walk("."):
		for ignore in ['arlib','.git','obj']:
			if ignore in dirs:
				dirs.remove(ignore)
		for filename in files:
			if filename.endswith((".c", ".cpp")):
				used += extract_gl(readfile(os.path.join(root, filename)))
	
	if used:  # if none used (e.g. freshly started project), leave all included, so it'll compile
		functions = filter(functions, used)
	#pointless, the savings are completely dwarfed by whatever the function does
	#it also makes the resulting header (and thereby binary) dependent on os.walk order, which isn't stable
	##sort by first index in 'used', not alphabetically, to maximize cache coherence
	##used.index() throws if it doesn't exist, but filter() says it does
	#functions.sort(key = lambda fn: used.index(fn['name']))


out = """// Autogenerated, do not edit. All changes will be undone.
#pragma once

class $CLASS : public aropengl_base {
public:
$CLASS() {}
$CLASS(context* core) { create(core); }
$CLASS(uint32_t width, uint32_t height, uintptr_t parent, uintptr_t* window, uint32_t flags) {
	create(width, height, parent, window, flags); }
#ifndef ARGUI_NONE
$CLASS(widget_viewport* port, uint32_t flags) { create(port, flags); }
#endif

bool create(context* core) { return aropengl_base::create(core, internalGetSymNames(), internalGetSymDest()); }
bool create(uint32_t width, uint32_t height, uintptr_t parent, uintptr_t* window, uint32_t flags) {
	return aropengl_base::create(width, height, parent, window, flags, internalGetSymNames(), internalGetSymDest()); }
#ifndef ARGUI_NONE
bool create(widget_viewport* port, uint32_t flags) {
	return aropengl_base::create(port, flags, internalGetSymNames(), internalGetSymDest()); }
#endif

""".replace("$CLASS", sys.argv[2])
for func in functions:
	out += func["ret"]+" (GLAPIENTRY * "+func["name"]+")("+func["args"]+");\n"
out += """
private:

const char * internalGetSymNames()
{
return
"""
for func in functions:
	out += "\"gl"+func["name"]+"\\0\"\n"
out += ";\n}\n"
for func in functions:
	out += "funcptr* internalGetSymDest() { return (funcptr*)&this->"+func["name"]+"; }\n"
	break
out += "};\n"


prev_out = None
try: # don't write file if unchanged, makes Makefile much more cooperative
	prev_out = readfile(sys.argv[3])
except: pass
if out != prev_out:
	writefile(sys.argv[3], out);
