#include "russian.h"

namespace russian { namespace {

class testp : public protocol {
public:
	/*private*/ void fill(chanbase* chan, int n)
	{
		chan->set_available(time(NULL), true);
		
		static textview::image* img = NULL;
		if (!img)
		{
			static const uint8_t bytes[] = {
				0x47,0x49,0x46,0x38,0x39,0x61,0x10,0x00,0x10,0x00,0xf2,0x00,0x00,0x00,0x00,0x00,
				0x8c,0x59,0x18,0xde,0xa2,0x39,0xff,0xfb,0x00,0xff,0xdb,0x21,0xef,0xf3,0xff,0x00,
				0x00,0x00,0x00,0x00,0x00,0x21,0xf9,0x04,0x01,0x00,0x00,0x06,0x00,0x2c,0x00,0x00,
				0x00,0x00,0x10,0x00,0x10,0x00,0x00,0x03,0x45,0x08,0xb6,0xdc,0x0d,0xd0,0x49,0x03,
				0x41,0x51,0x73,0x59,0x78,0xb1,0xdc,0xd0,0x50,0x7d,0x62,0x04,0x94,0x1e,0x85,0x6a,
				0x44,0x85,0x01,0xed,0xc8,0xba,0xb0,0xfb,0xd0,0xb8,0x83,0xdb,0xdf,0xee,0x04,0x40,
				0x8d,0x0c,0x18,0x30,0x04,0x06,0x03,0x42,0xf1,0xd4,0x32,0x12,0x90,0xc5,0x00,0x41,
				0xa0,0x94,0x56,0xa7,0x4a,0x06,0x11,0x8b,0x25,0x4e,0x88,0xde,0x46,0x02,0x00,0x3b
			};
			img = new textview::image(bytes, 16, 16);
		}
		
		while (n--)
		{
			textview::span msgparts[3];
			msgparts[0].text = "mun";
			msgparts[1].img = img;
			msgparts[1].text = "https://floating.muncher.se/muncher.png";
			msgparts[2].text = "cher" + tostring(n);
			
			chan->message(time(NULL), "", msgparts);
		}
	}
	
	group*   chan1;
	channel* chan2;
	group*   chan3;
	
	testp(impl* parent, bmlunserialize_impl& s) : protocol(parent)
	{
		ser_enter(s) {}
		
		chan1 =      mkgroup("1 Muncher",  NULL, false);  fill(chan1, 0);
		chan2 = chan1->child("2 Munchers", &chan2, true); fill(chan2, 2);
		chan3 =      mkgroup("3 Munchers", &chan3, true); fill(chan3, 50);
		
		runloop::global()->set_timer_rel(1000, bind_this(&testp::timer_cb));
	}
	
	int n = 3;
	void action(cstring text, void* userdata)
	{
		n = (n+1)%4;
		const char * names[] = { "a", "b", "c", "d" };
		span msg[1];
		msg[0].text = names[n]+(":"+text);
		chan1->message(names[n], time(NULL), "nerd", arrayview<span>(msg, (text == "." ? 0 : 1)));
	}
	
	bool timer_cb()
	{
		if (n&1)
		{
			span msg[1];
			msg[0].text = "x";
			chan2->message(time(NULL), "nerd", msg);
		}
		return true;
	}
};
}
russian::protocol* russian::protocol::create_testp(impl* parent, bmlunserialize_impl& s) { return new testp(parent, s); }
}
