#include "userview.h"
#include <gtk/gtk.h>

enum {
	col_name,
	col_count
	//if editing this, also edit the gtk_list_store_new call
};

userview* userview::create() { return new userview; }
userview::userview()
{
	// no point lazy-creating this, it's cheap
	view = GTK_TREE_VIEW(gtk_tree_view_new());
	
	GtkTreeViewColumn* col = gtk_tree_view_column_new();
	GtkCellRenderer* renderer = gtk_cell_renderer_text_new();
	gtk_tree_view_append_column(view, col);
	gtk_tree_view_column_pack_start(col, renderer, TRUE);
	gtk_tree_view_column_add_attribute(col, renderer, "text", col_name);
	//gtk_tree_view_column_add_attribute(col, renderer, "attributes", col_attr);
	gtk_cell_renderer_text_set_fixed_height_from_font(GTK_CELL_RENDERER_TEXT(renderer), 1);
	g_object_set(G_OBJECT(renderer), "ypad", 0, NULL);
	
	gtk_tree_view_set_headers_visible(view, false);
	
	scrollview = GTK_SCROLLED_WINDOW(gtk_scrolled_window_new(NULL, NULL));
	gtk_scrolled_window_set_policy(scrollview, GTK_POLICY_EXTERNAL, GTK_POLICY_AUTOMATIC);
	gtk_scrolled_window_set_shadow_type(scrollview, GTK_SHADOW_IN);
	gtk_container_add(GTK_CONTAINER(scrollview), GTK_WIDGET(view));
	
	void (*onactivate)(GtkTreeView* tree_view, GtkTreePath* path, GtkTreeViewColumn* column, void* user_data) =
	                [](GtkTreeView* tree_view, GtkTreePath* path, GtkTreeViewColumn* column, void* user_data)
	{
		userview* this_ = (userview*)user_data;
		
		GtkTreeIter iter;
		gtk_tree_model_get_iter(gtk_tree_view_get_model(tree_view), &iter, path);
		
		char* name;
		gtk_tree_model_get(gtk_tree_view_get_model(tree_view), &iter, col_name, &name, -1);
		this_->activate_cb(name);
		g_free(name);
	};
	g_signal_connect(view, "row-activated", G_CALLBACK(onactivate), this);
	
	store = gtk_list_store_new(col_count, G_TYPE_STRING);
	gint(*sort_func)(GtkTreeModel* model, GtkTreeIter* a, GtkTreeIter* b, void* user_data) =
	              [](GtkTreeModel* model, GtkTreeIter* a, GtkTreeIter* b, void* user_data)
	{
		char* namea;
		gtk_tree_model_get(model, a, col_name, &namea, -1);
		char* nameb;
		gtk_tree_model_get(model, b, col_name, &nameb, -1);
		int sort = string::icompare3(namea, nameb);
		g_free(namea);
		g_free(nameb);
		return sort;
	};
	gtk_tree_sortable_set_default_sort_func(GTK_TREE_SORTABLE(store), sort_func, this, NULL);
	gtk_tree_sortable_set_sort_column_id(GTK_TREE_SORTABLE(store), GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, GTK_SORT_ASCENDING);
	gtk_tree_view_set_model(view, GTK_TREE_MODEL(store));
	
	gtk_widget_set_name(GTK_WIDGET(view), "userview");
}

void userview::add(cstring user)
{
	if (members.contains(user)) return;
	
	GtkTreeIter newrow;
	gtk_list_store_insert_with_values(store, &newrow, 0, col_name, (const char*)user.c_str(), -1);
	
	GtkTreePath* path = gtk_tree_model_get_path(GTK_TREE_MODEL(store), &newrow);
	members.insert(user, gtk_tree_row_reference_new(GTK_TREE_MODEL(store), path));
	gtk_tree_path_free(path);
}

void userview::remove(cstring user)
{
	GtkTreeRowReference* rowref = members.get_or(user, NULL);
	if (!rowref) return;
	
	members.remove(user);
	
	GtkTreePath* path = gtk_tree_row_reference_get_path(rowref);
	
	GtkTreeIter iter;
	gtk_tree_model_get_iter(GTK_TREE_MODEL(store), &iter, path);
	
	gtk_list_store_remove(store, &iter);
	
	gtk_tree_path_free(path);
	gtk_tree_row_reference_free(rowref);
}

void userview::clear()
{
	for (GtkTreeRowReference* rowref : members.values())
		gtk_tree_row_reference_free(rowref);
	members.reset();
	gtk_list_store_clear(store);
}

userview::~userview()
{
	for (GtkTreeRowReference* rowref : members.values())
		gtk_tree_row_reference_free(rowref);
	g_object_unref(store);
}
