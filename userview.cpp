#ifndef ARGUI_NONE
#include "russian.h"
#include <gtk/gtk.h>

#if !GTK_CHECK_VERSION(3,16,0)
//this is somewhat glitchy (textview works fine, but channel list gets scrollbar), but there's no better option for old gtks
#define GTK_POLICY_EXTERNAL GTK_POLICY_AUTOMATIC
#endif

enum {
	col_name,
	col_count
	//if editing this, also edit the gtk_list_store_new call
};

userview* userview::create() { return new userview; }
userview::userview()
{
	view = GTK_TREE_VIEW(gtk_tree_view_new());
	
	GtkTreeViewColumn* col = gtk_tree_view_column_new();
	GtkCellRenderer* renderer = gtk_cell_renderer_text_new();
	gtk_tree_view_append_column(view, col);
	gtk_tree_view_column_pack_start(col, renderer, TRUE);
	gtk_tree_view_column_add_attribute(col, renderer, "text", col_name);
	//gtk_tree_view_column_add_attribute(col, renderer, "attributes", col_attr);
	gtk_cell_renderer_text_set_fixed_height_from_font(GTK_CELL_RENDERER_TEXT(renderer), 1);
	
	gtk_tree_view_set_headers_visible(view, false);
	
	scrollview = GTK_SCROLLED_WINDOW(gtk_scrolled_window_new(NULL, NULL));
	gtk_scrolled_window_set_policy(scrollview, GTK_POLICY_EXTERNAL, GTK_POLICY_AUTOMATIC);
	gtk_scrolled_window_set_shadow_type(scrollview, GTK_SHADOW_IN);
	gtk_container_add(GTK_CONTAINER(scrollview), GTK_WIDGET(view));
}

void userview::bind(data& dat)
{
	gtk_tree_view_set_model(view, GTK_TREE_MODEL(dat.store));
}

userview::data::data()
{
	store = gtk_list_store_new(1, G_TYPE_STRING);
	gtk_tree_sortable_set_sort_column_id(GTK_TREE_SORTABLE(store), col_name, GTK_SORT_ASCENDING);
}

void userview::data::add(cstring user)
{
	if (members.contains(user)) return;
	
	GtkTreeIter newrow;
	gtk_list_store_insert_with_values(store, &newrow, 0, col_name, (const char*)user.c_str(), -1);
	
	GtkTreePath* path = gtk_tree_model_get_path(GTK_TREE_MODEL(store), &newrow);
	members.insert(user, gtk_tree_row_reference_new(GTK_TREE_MODEL(store), path));
	gtk_tree_path_free(path);
}

void userview::data::remove(cstring user)
{
	GtkTreeRowReference* rowref = members.get_or(user, NULL);
	if (!rowref) return;
	
	GtkTreePath* path = gtk_tree_row_reference_get_path(rowref);
	GtkTreeIter iter;
	
	gtk_tree_model_get_iter(GTK_TREE_MODEL(store), &iter, path);
	
	gtk_list_store_remove(store, &iter);
	
	gtk_tree_path_free(path);
	gtk_tree_row_reference_free(rowref);
}

userview::data::~data()
{
	for (auto pair : members) { gtk_tree_row_reference_free(pair.value); }
	g_object_unref(store);
}

#endif
